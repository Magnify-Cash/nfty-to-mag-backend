name: PROD-backend

on:
  workflow_dispatch: 

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    env:
      name: ${GITHUB_REPOSITORY#*/}"-prod"
      key: "ssh-key-loop"
      tag: ${GITHUB_SHA}
      host: ${{ secrets.PROD_NAME_IP }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up environment variables
        env:
          NODE_ENV: ${{ vars.PROD_NODE_ENV }}
          PORT: ${{ vars.PROD_PORT }}
          CORS_WHITELIST: ${{ secrets.CORS_WHITELIST }} 
          BINANCE_PRIVATE_KEY: ${{ secrets.PROD_PRIVATE_KEY }}
          LOOP_PRIVATE_KEY: ${{ secrets.PROD_PRIVATE_KEY }}
          BINANCE_RPC: ${{ secrets.PROD_RPC }}
          LOOP_RPC: ${{ secrets.PROD_RPC }}
          MONGO_URL: ${{ secrets.PROD_MONGO_URL }}
        run: |
          echo "NODE_ENV=$NODE_ENV" >> .env
          echo "PORT=$PORT" >> .env
          echo "CORS_WHITELIST=$CORS_WHITELIST" >> .env
          echo "BINANCE_PRIVATE_KEY=$BINANCE_PRIVATE_KEY" >> .env
          echo "LOOP_PRIVATE_KEY=$LOOP_PRIVATE_KEY" >> .env
          echo "BINANCE_RPC=$BINANCE_RPC" >> .env
          echo "LOOP_RPC=$LOOP_RPC" >> .env
          echo "MONGO_URL=$MONGO_URL" >> .env

      - name: Build docker
        run: |    
          docker build . -t ${{ env.name }}:${{ env.tag }}

      - name: Save image
        run: |           
          docker save -o ${{ env.name }}.tar ${{ env.name }}:${{ env.tag }}

      - name: Save secret key
        run: |
          echo "${{ secrets.PROD_SSH }}" > ${key}
          sudo chmod 600 ${key}

      - name: Copy image
        run: |
          scp -i ${key} -o "StrictHostKeyChecking no" ${{ env.name }}.tar ${{ env.host }}:${{ env.name }}.tar
      
      - name: Start image
        run: |
          ssh -i ${key} -o "StrictHostKeyChecking no" ${{ env.host }} 'sudo docker load -i '${{ env.name }}'.tar; \
          sudo docker stop '${{ env.name }}' ; \
          sudo docker run -d --restart always -p 3030:3030 \
          --log-driver=awslogs --log-opt awslogs-region=eu-central-1 --log-opt awslogs-group=loop-backend --log-opt awslogs-create-group=true \
          --name '${{ env.name }}'-new '${{ env.name }}':'${{ env.tag }}'; \
          sudo docker rm '${{ env.name }}'; sudo docker rmi $(sudo docker images -q); \
          sudo docker rename '${{ env.name }}'-new '${{ env.name }}'; rm '${{ env.name }}'.tar'
