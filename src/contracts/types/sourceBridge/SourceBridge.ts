/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface SourceBridgeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "DIVIDER"
      | "RELAYER_ROLE"
      | "addToken"
      | "allWhitelistedTokens"
      | "allWhitelistedTokensLength"
      | "allocations"
      | "blockRefund"
      | "chain"
      | "emergencyWithdraw"
      | "getAllWhitelistedTokens"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isWhitelisted"
      | "minAmountForToken"
      | "minTimeToWaitBeforeRefund"
      | "nonce"
      | "nonceInfo"
      | "nonceIsBlockedForRefund"
      | "nonceIsRefunded"
      | "nonceIsUsed"
      | "otherChainToken"
      | "pause"
      | "paused"
      | "proxiableUUID"
      | "refund"
      | "removeToken"
      | "renounceRole"
      | "revokeRole"
      | "secondChainId"
      | "send"
      | "setAllocations"
      | "setMinAmountForToken"
      | "setNewWrappedNative"
      | "setOtherChainToken"
      | "setTimeToWaitBeforeRefund"
      | "setWhitelisted"
      | "supportsInterface"
      | "tokenIsSupported"
      | "unpause"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "withdraw"
      | "wrappedNative"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddToken"
      | "AdminChanged"
      | "BeaconUpgraded"
      | "BlockRefund"
      | "EmergencyWithdraw"
      | "Initialized"
      | "NewMinAmountForToken"
      | "NewMinTimeToWaitBeforeRefund"
      | "NewOtherChainToken"
      | "NewWrappedNative"
      | "Paused"
      | "Refund"
      | "RemoveToken"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Send"
      | "Unpaused"
      | "Upgraded"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "DIVIDER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "RELAYER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allWhitelistedTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allWhitelistedTokensLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allocations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "blockRefund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "chain", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllWhitelistedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      BigNumberish,
      AddressLike,
      BigNumberish,
      AddressLike,
      AddressLike,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minAmountForToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minTimeToWaitBeforeRefund",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nonceInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nonceIsBlockedForRefund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nonceIsRefunded",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nonceIsUsed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "otherChainToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "secondChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllocations",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinAmountForToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewWrappedNative",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOtherChainToken",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimeToWaitBeforeRefund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelisted",
    values: [AddressLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIsSupported",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedNative",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "DIVIDER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "RELAYER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allWhitelistedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allWhitelistedTokensLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllWhitelistedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minAmountForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minTimeToWaitBeforeRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonceInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonceIsBlockedForRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonceIsRefunded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonceIsUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "otherChainToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "secondChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinAmountForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNewWrappedNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOtherChainToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimeToWaitBeforeRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIsSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wrappedNative",
    data: BytesLike
  ): Result;
}

export namespace AddTokenEvent {
  export type InputTuple = [
    token: AddressLike,
    tokenOnSecondChain: AddressLike,
    minAmount: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    tokenOnSecondChain: string,
    minAmount: bigint
  ];
  export interface OutputObject {
    token: string;
    tokenOnSecondChain: string;
    minAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlockRefundEvent {
  export type InputTuple = [nonce: BigNumberish];
  export type OutputTuple = [nonce: bigint];
  export interface OutputObject {
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyWithdrawEvent {
  export type InputTuple = [
    token: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [token: string, to: string, amount: bigint];
  export interface OutputObject {
    token: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewMinAmountForTokenEvent {
  export type InputTuple = [token: AddressLike, minAmount: BigNumberish];
  export type OutputTuple = [token: string, minAmount: bigint];
  export interface OutputObject {
    token: string;
    minAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewMinTimeToWaitBeforeRefundEvent {
  export type InputTuple = [minTimeToWaitBeforeRefund: BigNumberish];
  export type OutputTuple = [minTimeToWaitBeforeRefund: bigint];
  export interface OutputObject {
    minTimeToWaitBeforeRefund: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewOtherChainTokenEvent {
  export type InputTuple = [token: AddressLike, otherChainToken: AddressLike];
  export type OutputTuple = [token: string, otherChainToken: string];
  export interface OutputObject {
    token: string;
    otherChainToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewWrappedNativeEvent {
  export type InputTuple = [
    oldWrappedNative: AddressLike,
    newWrappedNative: AddressLike
  ];
  export type OutputTuple = [
    oldWrappedNative: string,
    newWrappedNative: string
  ];
  export interface OutputObject {
    oldWrappedNative: string;
    newWrappedNative: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundEvent {
  export type InputTuple = [
    token: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    nonce: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    to: string,
    amount: bigint,
    nonce: bigint
  ];
  export interface OutputObject {
    token: string;
    to: string;
    amount: bigint;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveTokenEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SendEvent {
  export type InputTuple = [
    token: AddressLike,
    tokenOnSecondChain: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    amountToReceive: BigNumberish,
    nonce: string
  ];
  export type OutputTuple = [
    token: string,
    tokenOnSecondChain: string,
    to: string,
    amount: bigint,
    amountToReceive: bigint,
    nonce: string
  ];
  export interface OutputObject {
    token: string;
    tokenOnSecondChain: string;
    to: string;
    amount: bigint;
    amountToReceive: bigint;
    nonce: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    token: AddressLike,
    tokenOnSecondChain: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    nonce: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    tokenOnSecondChain: string,
    to: string,
    amount: bigint,
    nonce: bigint
  ];
  export interface OutputObject {
    token: string;
    tokenOnSecondChain: string;
    to: string;
    amount: bigint;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SourceBridge extends BaseContract {
  connect(runner?: ContractRunner | null): SourceBridge;
  waitForDeployment(): Promise<this>;

  interface: SourceBridgeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DIVIDER: TypedContractMethod<[], [bigint], "view">;

  RELAYER_ROLE: TypedContractMethod<[], [string], "view">;

  addToken: TypedContractMethod<
    [
      token: AddressLike,
      tokenOnSecondChain: AddressLike,
      minAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  allWhitelistedTokens: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  allWhitelistedTokensLength: TypedContractMethod<[], [bigint], "view">;

  allocations: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  blockRefund: TypedContractMethod<
    [nonceToBlock: BigNumberish],
    [void],
    "nonpayable"
  >;

  chain: TypedContractMethod<[], [string], "view">;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAllWhitelistedTokens: TypedContractMethod<[], [string[]], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _secondChainId: BigNumberish,
      _wrappedNative: AddressLike,
      _minAmountForNative: BigNumberish,
      _otherChainTokenForNative: AddressLike,
      _relayer: AddressLike,
      _minTimeToWaitBeforeRefund: BigNumberish,
      _chain: string
    ],
    [void],
    "nonpayable"
  >;

  isWhitelisted: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  minAmountForToken: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  minTimeToWaitBeforeRefund: TypedContractMethod<[], [bigint], "view">;

  nonce: TypedContractMethod<[], [bigint], "view">;

  nonceInfo: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint] & {
        token: string;
        creator: string;
        to: string;
        amount: bigint;
        creationTime: bigint;
      }
    ],
    "view"
  >;

  nonceIsBlockedForRefund: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  nonceIsRefunded: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  nonceIsUsed: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  otherChainToken: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  refund: TypedContractMethod<
    [nonceToRefund: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeToken: TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  secondChainId: TypedContractMethod<[], [bigint], "view">;

  send: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;

  setAllocations: TypedContractMethod<
    [_accounts: AddressLike[], _allocations: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  setMinAmountForToken: TypedContractMethod<
    [token: AddressLike, minAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setNewWrappedNative: TypedContractMethod<
    [_wrappedNative: AddressLike],
    [void],
    "nonpayable"
  >;

  setOtherChainToken: TypedContractMethod<
    [token: AddressLike, tokenOnSecondChain: AddressLike],
    [void],
    "nonpayable"
  >;

  setTimeToWaitBeforeRefund: TypedContractMethod<
    [_minTimeToWaitBeforeRefund: BigNumberish],
    [void],
    "nonpayable"
  >;

  setWhitelisted: TypedContractMethod<
    [_accounts: AddressLike[], _isWhitelisted: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tokenIsSupported: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  withdraw: TypedContractMethod<
    [
      token: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      nonceOnOtherChain: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  wrappedNative: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DIVIDER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "RELAYER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addToken"
  ): TypedContractMethod<
    [
      token: AddressLike,
      tokenOnSecondChain: AddressLike,
      minAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allWhitelistedTokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "allWhitelistedTokensLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allocations"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "blockRefund"
  ): TypedContractMethod<[nonceToBlock: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "chain"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllWhitelistedTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _secondChainId: BigNumberish,
      _wrappedNative: AddressLike,
      _minAmountForNative: BigNumberish,
      _otherChainTokenForNative: AddressLike,
      _relayer: AddressLike,
      _minTimeToWaitBeforeRefund: BigNumberish,
      _chain: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isWhitelisted"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "minAmountForToken"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "minTimeToWaitBeforeRefund"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nonce"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nonceInfo"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint] & {
        token: string;
        creator: string;
        to: string;
        amount: bigint;
        creationTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nonceIsBlockedForRefund"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "nonceIsRefunded"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "nonceIsUsed"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "otherChainToken"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "refund"
  ): TypedContractMethod<[nonceToRefund: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "secondChainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "send"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setAllocations"
  ): TypedContractMethod<
    [_accounts: AddressLike[], _allocations: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinAmountForToken"
  ): TypedContractMethod<
    [token: AddressLike, minAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setNewWrappedNative"
  ): TypedContractMethod<[_wrappedNative: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOtherChainToken"
  ): TypedContractMethod<
    [token: AddressLike, tokenOnSecondChain: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTimeToWaitBeforeRefund"
  ): TypedContractMethod<
    [_minTimeToWaitBeforeRefund: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWhitelisted"
  ): TypedContractMethod<
    [_accounts: AddressLike[], _isWhitelisted: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenIsSupported"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [
      token: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      nonceOnOtherChain: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "wrappedNative"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AddToken"
  ): TypedContractEvent<
    AddTokenEvent.InputTuple,
    AddTokenEvent.OutputTuple,
    AddTokenEvent.OutputObject
  >;
  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "BlockRefund"
  ): TypedContractEvent<
    BlockRefundEvent.InputTuple,
    BlockRefundEvent.OutputTuple,
    BlockRefundEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyWithdraw"
  ): TypedContractEvent<
    EmergencyWithdrawEvent.InputTuple,
    EmergencyWithdrawEvent.OutputTuple,
    EmergencyWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "NewMinAmountForToken"
  ): TypedContractEvent<
    NewMinAmountForTokenEvent.InputTuple,
    NewMinAmountForTokenEvent.OutputTuple,
    NewMinAmountForTokenEvent.OutputObject
  >;
  getEvent(
    key: "NewMinTimeToWaitBeforeRefund"
  ): TypedContractEvent<
    NewMinTimeToWaitBeforeRefundEvent.InputTuple,
    NewMinTimeToWaitBeforeRefundEvent.OutputTuple,
    NewMinTimeToWaitBeforeRefundEvent.OutputObject
  >;
  getEvent(
    key: "NewOtherChainToken"
  ): TypedContractEvent<
    NewOtherChainTokenEvent.InputTuple,
    NewOtherChainTokenEvent.OutputTuple,
    NewOtherChainTokenEvent.OutputObject
  >;
  getEvent(
    key: "NewWrappedNative"
  ): TypedContractEvent<
    NewWrappedNativeEvent.InputTuple,
    NewWrappedNativeEvent.OutputTuple,
    NewWrappedNativeEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Refund"
  ): TypedContractEvent<
    RefundEvent.InputTuple,
    RefundEvent.OutputTuple,
    RefundEvent.OutputObject
  >;
  getEvent(
    key: "RemoveToken"
  ): TypedContractEvent<
    RemoveTokenEvent.InputTuple,
    RemoveTokenEvent.OutputTuple,
    RemoveTokenEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Send"
  ): TypedContractEvent<
    SendEvent.InputTuple,
    SendEvent.OutputTuple,
    SendEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "AddToken(address,address,uint256)": TypedContractEvent<
      AddTokenEvent.InputTuple,
      AddTokenEvent.OutputTuple,
      AddTokenEvent.OutputObject
    >;
    AddToken: TypedContractEvent<
      AddTokenEvent.InputTuple,
      AddTokenEvent.OutputTuple,
      AddTokenEvent.OutputObject
    >;

    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "BlockRefund(uint256)": TypedContractEvent<
      BlockRefundEvent.InputTuple,
      BlockRefundEvent.OutputTuple,
      BlockRefundEvent.OutputObject
    >;
    BlockRefund: TypedContractEvent<
      BlockRefundEvent.InputTuple,
      BlockRefundEvent.OutputTuple,
      BlockRefundEvent.OutputObject
    >;

    "EmergencyWithdraw(address,address,uint256)": TypedContractEvent<
      EmergencyWithdrawEvent.InputTuple,
      EmergencyWithdrawEvent.OutputTuple,
      EmergencyWithdrawEvent.OutputObject
    >;
    EmergencyWithdraw: TypedContractEvent<
      EmergencyWithdrawEvent.InputTuple,
      EmergencyWithdrawEvent.OutputTuple,
      EmergencyWithdrawEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "NewMinAmountForToken(address,uint256)": TypedContractEvent<
      NewMinAmountForTokenEvent.InputTuple,
      NewMinAmountForTokenEvent.OutputTuple,
      NewMinAmountForTokenEvent.OutputObject
    >;
    NewMinAmountForToken: TypedContractEvent<
      NewMinAmountForTokenEvent.InputTuple,
      NewMinAmountForTokenEvent.OutputTuple,
      NewMinAmountForTokenEvent.OutputObject
    >;

    "NewMinTimeToWaitBeforeRefund(uint256)": TypedContractEvent<
      NewMinTimeToWaitBeforeRefundEvent.InputTuple,
      NewMinTimeToWaitBeforeRefundEvent.OutputTuple,
      NewMinTimeToWaitBeforeRefundEvent.OutputObject
    >;
    NewMinTimeToWaitBeforeRefund: TypedContractEvent<
      NewMinTimeToWaitBeforeRefundEvent.InputTuple,
      NewMinTimeToWaitBeforeRefundEvent.OutputTuple,
      NewMinTimeToWaitBeforeRefundEvent.OutputObject
    >;

    "NewOtherChainToken(address,address)": TypedContractEvent<
      NewOtherChainTokenEvent.InputTuple,
      NewOtherChainTokenEvent.OutputTuple,
      NewOtherChainTokenEvent.OutputObject
    >;
    NewOtherChainToken: TypedContractEvent<
      NewOtherChainTokenEvent.InputTuple,
      NewOtherChainTokenEvent.OutputTuple,
      NewOtherChainTokenEvent.OutputObject
    >;

    "NewWrappedNative(address,address)": TypedContractEvent<
      NewWrappedNativeEvent.InputTuple,
      NewWrappedNativeEvent.OutputTuple,
      NewWrappedNativeEvent.OutputObject
    >;
    NewWrappedNative: TypedContractEvent<
      NewWrappedNativeEvent.InputTuple,
      NewWrappedNativeEvent.OutputTuple,
      NewWrappedNativeEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Refund(address,address,uint256,uint256)": TypedContractEvent<
      RefundEvent.InputTuple,
      RefundEvent.OutputTuple,
      RefundEvent.OutputObject
    >;
    Refund: TypedContractEvent<
      RefundEvent.InputTuple,
      RefundEvent.OutputTuple,
      RefundEvent.OutputObject
    >;

    "RemoveToken(address)": TypedContractEvent<
      RemoveTokenEvent.InputTuple,
      RemoveTokenEvent.OutputTuple,
      RemoveTokenEvent.OutputObject
    >;
    RemoveToken: TypedContractEvent<
      RemoveTokenEvent.InputTuple,
      RemoveTokenEvent.OutputTuple,
      RemoveTokenEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Send(address,address,address,uint256,uint256,string)": TypedContractEvent<
      SendEvent.InputTuple,
      SendEvent.OutputTuple,
      SendEvent.OutputObject
    >;
    Send: TypedContractEvent<
      SendEvent.InputTuple,
      SendEvent.OutputTuple,
      SendEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "Withdraw(address,address,address,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
